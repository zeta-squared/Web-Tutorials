The following is a list of python (flask) packages we are using and their applications:

- flask-wtf: A flask wrapper for WTForms. This package allows us to create web forms (via jinja2) using class objects. Essentially each form is a class and the data in the class defines what the form items are.

- flask-sqlalchemy: A flask wrapper for SQLAlchemy. Essentially an object relation mapper for sql databases. This package is compatible with MySQL, PostgreSQL and SQLite. As with flask-wtf, we can create databases as class objects and the elements of the respective class define the data entries of the database.

 - flask-migrate: A flask wrapper for Alembic. A package which allows us to change database structure and then migrate existing database entries to the new structure. This of course requires some setup intially, but will pay itself off when the need arises to change database structure as the migration is effortless for the user.

 - flask-login: A flask application for handling user sessions. Essentially a flask session handler for server-side.
 
- email-validator: A dependency for the Email() validator from WTForms. This is used when building forms that require an email input to ensure that what the user has inputted matches the structure of an email address.

- Python's unittest: This allows us to create unit tests which we can run to check if particular features of the applications are working. In the chapter on followers, we created a tests.py file that tests password hashing, user avatar and followers functionality. The purpose of this is to be able to test these features (and any others that I may add) when we make changes to the application.

- flask-mail: A package which sets up an SMTP mail server in our flask application which allows us to send messages (emails) from our views and scripts.

- pyjwt - Python JSON web tokens. A package which generates JSON web tokens to use for authentication purposes.

- flask-moment: A flask extension for the popular javascript extension moment.js . Moment.js allows us to configure the web applications displayed time and date using the users OS standard by working in the front end and pulling the necessary configuration data from the users' web browser.
